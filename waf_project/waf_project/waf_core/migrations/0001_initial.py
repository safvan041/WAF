# Generated by Django 5.2.6 on 2025-09-11 07:02

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="FirewallRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("sql_injection", "SQL Injection Protection"),
                            ("xss", "Cross-Site Scripting (XSS) Protection"),
                            ("bot_protection", "Bot Protection"),
                            ("rate_limiting", "Rate Limiting"),
                            ("geo_blocking", "Geographic Blocking"),
                            ("ip_whitelist", "IP Whitelist"),
                            ("ip_blacklist", "IP Blacklist"),
                            ("custom", "Custom Rule"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "pattern",
                    models.TextField(help_text="Regex pattern or rule definition"),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("block", "Block Request"),
                            ("allow", "Allow Request"),
                            ("log", "Log Only"),
                            ("challenge", "Challenge (Captcha)"),
                            ("rate_limit", "Rate Limit"),
                        ],
                        default="block",
                        max_length=20,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                (
                    "target_field",
                    models.CharField(
                        default="all",
                        help_text="Target field: all, headers, body, url, etc.",
                        max_length=50,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_custom", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Firewall Rule",
                "verbose_name_plural": "Firewall Rules",
                "ordering": ["-severity", "name"],
            },
        ),
        migrations.CreateModel(
            name="Tenant",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Company/Organization name", max_length=200
                    ),
                ),
                (
                    "domain",
                    models.CharField(
                        help_text="Primary domain to protect (e.g., example.com)",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "additional_domains",
                    models.TextField(
                        blank=True, help_text="Additional domains (one per line)"
                    ),
                ),
                ("contact_email", models.EmailField(max_length=254)),
                ("contact_name", models.CharField(max_length=100)),
                ("contact_phone", models.CharField(blank=True, max_length=20)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("suspended", "Suspended"),
                            ("trial", "Trial"),
                        ],
                        default="trial",
                        max_length=20,
                    ),
                ),
                (
                    "plan",
                    models.CharField(
                        choices=[
                            ("free", "Free"),
                            ("basic", "Basic"),
                            ("pro", "Professional"),
                            ("enterprise", "Enterprise"),
                        ],
                        default="free",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("api_key", models.CharField(blank=True, max_length=64, unique=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Tenant",
                "verbose_name_plural": "Tenants",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RateLimitConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("requests_per_minute", models.IntegerField(default=60)),
                ("requests_per_hour", models.IntegerField(default=1000)),
                ("requests_per_day", models.IntegerField(default=10000)),
                (
                    "burst_allowance",
                    models.IntegerField(
                        default=10, help_text="Additional requests allowed in burst"
                    ),
                ),
                ("per_ip_requests_per_minute", models.IntegerField(default=10)),
                ("per_ip_requests_per_hour", models.IntegerField(default=100)),
                (
                    "whitelist_bypass",
                    models.BooleanField(
                        default=True,
                        help_text="Allow whitelisted IPs to bypass rate limits",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tenant",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rate_limit_config",
                        to="waf_core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rate Limit Configuration",
                "verbose_name_plural": "Rate Limit Configurations",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("superadmin", "Super Admin"),
                            ("tenant_admin", "Tenant Admin"),
                            ("analyst", "Analyst"),
                            ("user", "User"),
                        ],
                        default="user",
                        max_length=20,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True, related_name="waf_core_users", to="auth.group"
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True, related_name="waf_core_users", to="auth.permission"
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="waf_core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="WAFConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "protection_level",
                    models.CharField(
                        choices=[
                            ("low", "Low - Basic protection"),
                            ("medium", "Medium - Standard protection"),
                            ("high", "High - Aggressive protection"),
                            ("custom", "Custom - User-defined rules"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("is_enabled", models.BooleanField(default=True)),
                ("sql_injection_protection", models.BooleanField(default=True)),
                ("xss_protection", models.BooleanField(default=True)),
                ("bot_protection", models.BooleanField(default=True)),
                ("rate_limiting_enabled", models.BooleanField(default=True)),
                ("geographic_blocking_enabled", models.BooleanField(default=False)),
                (
                    "sql_injection_sensitivity",
                    models.IntegerField(
                        default=5,
                        help_text="Sensitivity level 1-10 (10 = most sensitive)",
                    ),
                ),
                ("xss_sensitivity", models.IntegerField(default=5)),
                ("bot_sensitivity", models.IntegerField(default=5)),
                (
                    "block_page_content",
                    models.TextField(
                        blank=True, help_text="Custom HTML content for blocked requests"
                    ),
                ),
                (
                    "challenge_type",
                    models.CharField(
                        choices=[
                            ("captcha", "CAPTCHA"),
                            ("js_challenge", "JavaScript Challenge"),
                        ],
                        default="captcha",
                        max_length=20,
                    ),
                ),
                (
                    "log_all_requests",
                    models.BooleanField(
                        default=False, help_text="Log all requests (not just threats)"
                    ),
                ),
                (
                    "log_request_body",
                    models.BooleanField(
                        default=False, help_text="Include request body in logs"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tenant",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="waf_config",
                        to="waf_core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "WAF Configuration",
                "verbose_name_plural": "WAF Configurations",
            },
        ),
        migrations.CreateModel(
            name="SecurityEvent",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("attack_blocked", "Attack Blocked"),
                            ("attack_logged", "Attack Logged"),
                            ("rate_limited", "Rate Limited"),
                            ("bot_detected", "Bot Detected"),
                            ("geo_blocked", "Geographic Block"),
                            ("whitelist_pass", "Whitelist Pass"),
                            ("custom_rule", "Custom Rule Triggered"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "action_taken",
                    models.CharField(
                        choices=[
                            ("block", "Block Request"),
                            ("allow", "Allow Request"),
                            ("log", "Log Only"),
                            ("challenge", "Challenge (Captcha)"),
                            ("rate_limit", "Rate Limit"),
                        ],
                        max_length=20,
                    ),
                ),
                ("source_ip", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True)),
                (
                    "request_method",
                    models.CharField(
                        default="UNKNOWN",
                        help_text="The HTTP method of the request.",
                        max_length=10,
                    ),
                ),
                ("request_url", models.URLField()),
                ("request_headers", models.JSONField(blank=True, default=dict)),
                ("request_body", models.TextField(blank=True)),
                ("country", models.CharField(blank=True, max_length=100)),
                ("city", models.CharField(blank=True, max_length=100)),
                (
                    "attack_pattern",
                    models.TextField(
                        blank=True, help_text="Matched pattern or signature"
                    ),
                ),
                (
                    "threat_score",
                    models.IntegerField(default=0, help_text="Threat score (0-100)"),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "rule",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="waf_core.firewallrule",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="security_events",
                        to="waf_core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Security Event",
                "verbose_name_plural": "Security Events",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["tenant", "timestamp"],
                        name="waf_core_se_tenant__6c2ce0_idx",
                    ),
                    models.Index(
                        fields=["source_ip", "timestamp"],
                        name="waf_core_se_source__d859b8_idx",
                    ),
                    models.Index(
                        fields=["event_type", "timestamp"],
                        name="waf_core_se_event_t_89f5b8_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="IPWhitelist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ip_address", models.GenericIPAddressField()),
                (
                    "cidr_range",
                    models.CharField(
                        blank=True,
                        help_text="CIDR notation for IP ranges (e.g., 192.168.1.0/24)",
                        max_length=50,
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=200)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ip_whitelist",
                        to="waf_core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "IP Whitelist Entry",
                "verbose_name_plural": "IP Whitelist Entries",
                "unique_together": {("tenant", "ip_address")},
            },
        ),
        migrations.CreateModel(
            name="IPBlacklist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ip_address", models.GenericIPAddressField()),
                ("cidr_range", models.CharField(blank=True, max_length=50)),
                (
                    "reason",
                    models.CharField(
                        help_text="Reason for blacklisting", max_length=200
                    ),
                ),
                (
                    "auto_added",
                    models.BooleanField(
                        default=False, help_text="Automatically added by WAF"
                    ),
                ),
                (
                    "threat_score_threshold",
                    models.IntegerField(
                        blank=True,
                        help_text="Threat score that triggered auto-blacklist",
                        null=True,
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Automatic expiration time (optional)",
                        null=True,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ip_blacklist",
                        to="waf_core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "IP Blacklist Entry",
                "verbose_name_plural": "IP Blacklist Entries",
                "unique_together": {("tenant", "ip_address")},
            },
        ),
        migrations.CreateModel(
            name="GeographicRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "country_code",
                    models.CharField(
                        help_text="ISO 3166-1 alpha-2 country code", max_length=2
                    ),
                ),
                ("country_name", models.CharField(max_length=100)),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("allow", "Allow"),
                            ("block", "Block"),
                            ("challenge", "Challenge"),
                        ],
                        default="block",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="geo_rules",
                        to="waf_core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Geographic Rule",
                "verbose_name_plural": "Geographic Rules",
                "unique_together": {("tenant", "country_code")},
            },
        ),
        migrations.CreateModel(
            name="DailyReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("report_date", models.DateField()),
                ("total_requests", models.IntegerField(default=0)),
                ("blocked_requests", models.IntegerField(default=0)),
                ("allowed_requests", models.IntegerField(default=0)),
                ("threat_score_avg", models.FloatField(default=0.0)),
                ("sql_injection_attempts", models.IntegerField(default=0)),
                ("xss_attempts", models.IntegerField(default=0)),
                ("bot_requests", models.IntegerField(default=0)),
                ("rate_limited_requests", models.IntegerField(default=0)),
                ("geo_blocked_requests", models.IntegerField(default=0)),
                (
                    "top_attacking_ips",
                    models.JSONField(default=list, help_text="Top 10 attacking IPs"),
                ),
                (
                    "top_attack_types",
                    models.JSONField(
                        default=list, help_text="Most common attack types"
                    ),
                ),
                (
                    "top_targeted_urls",
                    models.JSONField(default=list, help_text="Most targeted URLs"),
                ),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "is_sent",
                    models.BooleanField(
                        default=False, help_text="Email sent to tenant"
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="daily_reports",
                        to="waf_core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Daily Report",
                "verbose_name_plural": "Daily Reports",
                "ordering": ["-report_date"],
                "unique_together": {("tenant", "report_date")},
            },
        ),
        migrations.CreateModel(
            name="TenantFirewallConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_enabled", models.BooleanField(default=True)),
                (
                    "custom_action",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("block", "Block Request"),
                            ("allow", "Allow Request"),
                            ("log", "Log Only"),
                            ("challenge", "Challenge (Captcha)"),
                            ("rate_limit", "Rate Limit"),
                        ],
                        help_text="Override default rule action",
                        max_length=20,
                    ),
                ),
                (
                    "custom_threshold",
                    models.IntegerField(
                        blank=True,
                        help_text="Custom threshold for rate limiting",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_configs",
                        to="waf_core.firewallrule",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="firewall_configs",
                        to="waf_core.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tenant Firewall Configuration",
                "verbose_name_plural": "Tenant Firewall Configurations",
                "ordering": ["rule__severity", "rule__name"],
                "unique_together": {("tenant", "rule")},
            },
        ),
    ]
